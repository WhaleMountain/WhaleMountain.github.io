<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Whale Mountain</title><link>https://whalem.net/</link><description>Recent content on Whale Mountain</description><generator>Hugo</generator><language>jp</language><copyright>© 2021 Whale Mountain. Theme yuki. Powered by Hugo.</copyright><lastBuildDate>Mon, 12 Aug 2024 20:50:07 +0900</lastBuildDate><atom:link href="https://whalem.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Highlight.jsのアップデート</title><link>https://whalem.net/post/2024-08/update-highlightjs/</link><pubDate>Mon, 12 Aug 2024 19:38:41 +0900</pubDate><guid>https://whalem.net/post/2024-08/update-highlightjs/</guid><description>下記コミットの内容についての記事です。
update submodule and config.toml update highlightjs リンクの変更 テーマで使用されていた Highlight.js のバージョンが v9.13.1 でした。
脆弱性の報告もあるのでバージョンを上げようと思いました。
参考: highlight.js@9.13.1 vulnerabilities 公式サイトからJSファイルをダウンロードしてファイルを更新してもいいけど、バージョンアップがしやすいようにCDNを利用します。
- &amp;lt;script src=&amp;quot;{{ &amp;quot;js/highlight.min.js&amp;quot; | absURL }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; + &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.10.0/highlight.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; あとは initHighlightingOnLoad が非推奨になっているので、ドキュメント通りに変更する。
Deprecated API - &amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt; + &amp;lt;script&amp;gt;hljs.highlightAll();&amp;lt;/script&amp;gt; エラーの修正 これで終わりかなと思ったらコンソールに下記 Warning が。。
One of your code blocks includes unescaped HTML. This is a potentially serious security risk. https://github.com/highlightjs/highlight.js/wiki/security The element with unescaped HTML: ... 調べてたら強調されているコードを再強調すると Warning が表示されるらしい。
参考: Repeated highlighting of already highlighted code causes &amp;ldquo;One of your code blocks includes unescaped HTML.</description></item><item><title>こだわりのないdotfiles</title><link>https://whalem.net/post/2024-08/my-dotfiles/</link><pubDate>Tue, 06 Aug 2024 22:18:41 +0900</pubDate><guid>https://whalem.net/post/2024-08/my-dotfiles/</guid><description>利用している dotfiles のリポジトリは非公開にしているので、dotfiles の供養。
シェルは zsh、ターミナルは MacOS のデフォルトのターミナルを利用します。
dotfiles ホームディレクトリに .dotfile ディレクトリを作成して、以下のように設定ファイルを配置します。
.dotfile ├── .zsh │ ├── [plugin] zsh-autosuggestions │ ├── [plugin] zsh-syntax-highlighting │ ├── zsh-darwin.zsh │ ├── zsh-linux.zsh │ └── zsh-custom.zsh └── .zshrc ※実際は git clone するだけです。
環境別の設定 MacOS、Linux での使用を想定しているので .zshrc に OS ごとの設定ファイルを読み込むように指定します。
case ${OSTYPE} in darwin*) source $HOME/.zsh/zsh-darwin.zsh ;; linux*) source $HOME/.zsh/zsh-linux.zsh ;; esac if [ -e $HOME/.zsh/zsh-custom.zsh ]; then source $HOME/.zsh/zsh-custom.zsh fi zsh-darwin.zsh や zsh-linux.zsh には LANG などの環境変数や ls の色の調整などを記述します。</description></item><item><title>ページネーションの修正</title><link>https://whalem.net/post/2024-08/fix-theme-pagination/</link><pubDate>Thu, 01 Aug 2024 21:48:27 +0900</pubDate><guid>https://whalem.net/post/2024-08/fix-theme-pagination/</guid><description>下記コミットの内容についての記事です。
fix pagination tags画面の修正 Tags ページを見ていたらテーマを確認したところページネーションがうまくいっていないことを確認。
下記の記述になっていました。
layouts/_default/single.html {{ range .Pages }} &amp;lt;div class=&amp;quot;index-posts__list&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;l-time&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;{{.Permalink}}&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;2006.01.02 15:04&amp;quot; }}&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;l-title&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;{{.Permalink}}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; {{ end }} &amp;lt;div class=&amp;quot;index-paginate&amp;quot;&amp;gt; {{ partial &amp;quot;pagination.html&amp;quot; . }} &amp;lt;/div&amp;gt; 単純に Pagination が使われていないのを確認、使うように修正。
- {{ range .Pages }} + {{ range .Paginator.Pages }} ページネーションの修正 他におかしいところないかと大量に記事を追加して確認するとエラーが。。
pagination.html:106:28&amp;quot;: execute of template failed at &amp;lt;$pag.Last.Permalink&amp;gt;: can’t evaluate field Permalink in type *page.Pager Pagination のドキュメントを眺めると .Last はあるけど .</description></item><item><title>記事に更新時間の追加</title><link>https://whalem.net/post/2024-07/hugo-lastmod/</link><pubDate>Tue, 30 Jul 2024 22:12:49 +0900</pubDate><guid>https://whalem.net/post/2024-07/hugo-lastmod/</guid><description>個人的にブログの公開日と更新日があるとありがたい。なので Hugo のテーマをいじって更新日を表示する。
テンプレートの修正 とりあえず公式サイトを調べると Lastmod が使えそう。
Hugo テーマのテンプレートを操作して Edited on を追加する。
{{ if ne .Date .Lastmod }} Edited on &amp;amp;ensp;&amp;amp;ensp;&amp;amp;ensp;&amp;amp;ensp;{{ .Lastmod.Format &amp;quot;2006.01.02 15:04&amp;quot; }} {{ end }} とりあえず設定されている Date と更新時間が違うなら表示する。あと無理やり &amp;amp;ensp; で幅を調整。
表示形式は Format を参考にする。
補足 GitHub Actions でビルドして Lastmod を取得すると GitHub にプッシュした時間が取得されるので(多分)、必ず更新時間が表示されます。。。</description></item><item><title>久しぶりに更新</title><link>https://whalem.net/post/2024-07/long-time-no-see/</link><pubDate>Sun, 28 Jul 2024 16:55:43 +0900</pubDate><guid>https://whalem.net/post/2024-07/long-time-no-see/</guid><description>久しぶりに更新 全然運用していなかったので、ブログを更新できるか確認していた。
とりあえずやったことのメモ。
Hugoの確認 GitHub Pages に移行したときの Hugo のバージョンは 0.83.0 だったけど、今は 0.129.0 になってた。
とりあえずビルドできるか確認したら、エラーが。。
parse failed: template: _default/list.html:4: function &amp;quot;sanitizeurl&amp;quot; not defined sanitizeurl がないとのことで代わりのもの探したけどぱっと見見つけられないので、一旦削除で対応 (そんなんでいいのか)
baseUrl のシリアライズなので多分問題ないと思いたい。
GitHub Actionsの更新 Yaml ファイルの中身を忘れているけど、まぁ使っているものは色々バージョンは上げとく。
actions/checkout v2 &amp;gt; v4 peaceiris/actions-hugo v2 &amp;gt; v3 peaceiris/actions-gh-pages v3 &amp;gt; v4 あとはDeploy Keyの再設定
GitHub Pages 用のリポジトリに Deploy keys を登録して、Markdown ファイルを置くリポジトリに Repository secrets を設定する。
WhaleMountain.github.io Settings &amp;gt; Deploy kyes に公開鍵を登録 whalem Settings &amp;gt; Secrets and variables &amp;gt; Repository secrets に秘密鍵を登録 鍵は 1Password で管理。あとはブログ更新しなくなったら Deploy keys の登録を削除する。</description></item><item><title>ラズパイで動かしていたWikiをGitHub Pagesに移行した</title><link>https://whalem.net/post/2021-05/migrating-mywiki-to-github-pages/</link><pubDate>Sun, 30 May 2021 18:54:00 +0900</pubDate><guid>https://whalem.net/post/2021-05/migrating-mywiki-to-github-pages/</guid><description>移行 ラズパイのDockerで自分用のWikiを動かしていたが、GitHub Pagesの誘惑に負けたので移行する。
GitHub Pagesの公開用のリポジトリと、ソース用のリポジトリを分けて作成しているが、個人的にこの構成が好きだからで、特に深い意味はありません。
手順 Username.github.io のリポジトリを作成する 上で作成したリポジトリにDeploy Keyを設定する 次にHugoなどの .md ファイルを置くリポジトリを作成する 1で作成したリポジトリにPushするためにSecret Keyを設定する GitHub Actionを設定し終了 ※ 2, 4で設定したKeyはMacOS上でssh-keygenで作成したKeyを設定する。1には公開鍵(.pub)、3には秘密鍵を設定する。
Github Action Hugo公式のHost on GitHubを参考に作成する。
name: github pages on: push: branches: - main # Set a branch to deploy paths: - 'pages/**' pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .</description></item><item><title>Dockerfileのよく忘れる部分のメモ</title><link>https://whalem.net/post/2021-03/dockerfile-memo/</link><pubDate>Sun, 14 Mar 2021 13:13:16 +0900</pubDate><guid>https://whalem.net/post/2021-03/dockerfile-memo/</guid><description>DEBIAN_FRONTEND apt install時にインタラクティブな表示を無効にする。
RUN DEBIAN_FRONTEND=noninteractive \ apt-get install -y Multi-Stage Build Multi-StageでCOPYする時の指定の仕方。
FROM golang:rc-alpine3.12 AS build FROM alpine:3.12 COPY --from=build /tmp/main /tmp/</description></item><item><title>GiteaにSSH接続できるようにする</title><link>https://whalem.net/post/2021-03/gitea-ssh-push/</link><pubDate>Sat, 13 Mar 2021 17:09:30 +0900</pubDate><guid>https://whalem.net/post/2021-03/gitea-ssh-push/</guid><description>GiteaはDockerで作成したブリッジネットワークのIPアドレスを振ってNginxでリバースプロキシしてる。Dockerのブリッジドライバーのルールにより、そのブリッジないのコンテナ、もしくはDockerのホストからしかアクセスできない。SSH接続どうしようかなと思ってたのですが、ホスト側を踏み台にしたらいいのか。
ということで、手元のPC側の~/.ssh/configを編集する。ProxyJumpによりホストを踏み台にできる(ﾌﾐﾌﾐ。
Host gitea.whalem.net HostName [Container IP Address] User git IdentityFile [Private Key] ProxyJump docker-host Host docker-host HostName [Host Server IP Address] User user あとは、CloneしたりPushしたり。Gitea側にSSH Keyの登録も忘れずに。</description></item><item><title>Raspberry PiにDocker環境のインストール</title><link>https://whalem.net/post/2021-03/docker-on-raspberrypi/</link><pubDate>Sat, 13 Mar 2021 00:50:55 +0900</pubDate><guid>https://whalem.net/post/2021-03/docker-on-raspberrypi/</guid><description>Dockerのインストール 公式ドキュメントに従っても良いが、インストール用のスクリプトがあるのでそれを使う。
$ curl -fsSL https://get.docker.com -o install-docker.sh $ sh ./install-docker.sh 簡単だね。
docker-composeのインストール docker-composeのリポジトリのリリースにはarm用のバイナリはないので、ソースからビルドを行う。
$ git clone https://github.com/docker/compose.git $ cd compose $ git checkout 1.27.4 $ ./script/build/linux しばし待つ。dist下にバイナリが吐かれていれば成功。あとは、/usr/local/binにコピって終了。
$ ls dist/ docker-compose-linux-aarch64 $ cp dist/dockeer-compose /usr/local/bin/docker-compose $ chown root:root /usr/local/bin/docker-compose $ chmod 755 /usr/local/bin/docker-compose $ docker-compose version docker-compose version 1.27.4, build 40524192 docker-py version: 4.3.1 CPython version: 3.7.7 OpenSSL version: OpenSSL 1.1.0l 10 Sep 2019 Version 1.28.x からビルド時のDockerfileとscript/build/linuxの中身が変わり、今回の環境ではバイナリが吐かれなかった。ビルドは成功してるのにね。面倒なので1.27.4を使用する。</description></item><item><title>DroneのカスタムDNS設定</title><link>https://whalem.net/post/2021-03/drone-network-setting/</link><pubDate>Wed, 10 Mar 2021 12:58:54 +0900</pubDate><guid>https://whalem.net/post/2021-03/drone-network-setting/</guid><description>自宅の環境でGitea/Droneを構築していたが、CI時にGiteaからリポジトリをCloneできない。ドメインに接続できないと。自宅のLANからWAN側のIPにはアクセスできないので、内部DNSとしてUnboundを構築した。
Initialized empty Git repository in /drone/src/.git/ + git fetch origin +refs/heads/master: fatal: unable to access 'http://gitea.whalem.net/whalem/drone_ci_test.git/': Failed to connect to gitea.whalem.net port 80: Operation timed out DNSを構築したので、Drone Runnerへ設定したが、同じようにFailed to connect to gitea.whalem.net port 80: Operation timed outとなる。Pingしてみると。
$ ping -c 4 gitea.whalem.net PING gitea.whalem.net (&amp;lt;WAN_IP&amp;gt;): 56 data bytes 64 bytes from &amp;lt;WAN_IP&amp;gt;: seq=0 ttl=254 time=0.890 ms あらら。Runnerに設定したけど、Pipelineの処理は別コンテナが作成され実行されるので、Runnerに設定しても意味ないと。Droneが作成するコンテナへDNSの設定方法を調べたけど、あまり良さそうな解決策は見つからなかったので、下の方法をとる。
Specify a host or a custom dns in drone-git image /etc/docker/daemon.jsonに内部DNSのアドレスを追加する。daemon.jsonは無ければ新しく作成する。
{ &amp;quot;dns&amp;quot;: [&amp;quot;CUSTOM_DNS&amp;quot;, &amp;quot;8.</description></item><item><title>About</title><link>https://whalem.net/about/</link><pubDate>Tue, 09 Mar 2021 21:10:32 +0900</pubDate><guid>https://whalem.net/about/</guid><description>自分用のWiki的なやつを書く。
Raspberry Pi から GitHub Pages に移行しました！
新構成 GitHub Pages Hugo Theme, hugo-theme-yuki 配信の流れ GitHubにプッシュする GitHub ActionsでHugoビルドする GitHub Pagesで配信する 以上 旧構成 Server
Raspberry Pi 3B+ Software and Application etc
Docker Nginx Hugo Gitea Drone Hugo theme
hugo-theme-yuki 旧構成の配信の流れ Giteaにプッシュする DroneでHuboビルドする Nginxで配信する 以上</description></item><item><title>The first</title><link>https://whalem.net/post/2021-03/first-post/</link><pubDate>Tue, 09 Mar 2021 21:02:51 +0900</pubDate><guid>https://whalem.net/post/2021-03/first-post/</guid><description>Hello Hello, World!!</description></item></channel></rss>