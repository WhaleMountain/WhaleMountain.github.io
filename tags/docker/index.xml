<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Whale Mountain</title><link>https://whalem.net/tags/docker/</link><description>Recent content in Docker on Whale Mountain</description><generator>Hugo</generator><language>jp</language><copyright>© 2021 Whale Mountain. Theme yuki. Powered by Hugo.</copyright><lastBuildDate>Mon, 05 May 2025 00:28:32 +0900</lastBuildDate><atom:link href="https://whalem.net/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>DockerのIpv6を有効にする</title><link>https://whalem.net/post/2025-05/docker-ipv6/</link><pubDate>Mon, 05 May 2025 00:04:44 +0900</pubDate><guid>https://whalem.net/post/2025-05/docker-ipv6/</guid><description>&lt;p>Raspberry Piに&lt;a href="https://whalem.net/post/2025-02/adgurd-home-setup/">AdGuard Homeの導入&lt;/a>を導入したが、IPv6のDNSを利用できなかったのでDockerのIPv6サポートを有効にする。&lt;/p>
&lt;h3 id="ipv6サポートの有効化">IPv6サポートの有効化&lt;/h3>
&lt;p>ほとんど公式通り&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.jp/config/daemon/ipv6.html">IPv6 サポートの有効化&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>/etc/docker/daemon.json&lt;/code> に下記の内容を追加する。&lt;code>daemon.json&lt;/code>がない場合は新規作成で大丈夫です。&lt;/p>
&lt;pre>&lt;code class="language-json">{
 &amp;quot;ipv6&amp;quot;: true,
 &amp;quot;fixed-cidr-v6&amp;quot;: &amp;quot;2001:db8:2::/64&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>Dockerを再起動する。&lt;/p>
&lt;pre>&lt;code class="language-shell">$ systemctl reload docker.service
&lt;/code>&lt;/pre>
&lt;p>&lt;code>ip a&lt;/code>でIPv6アドレスが降られているか確認できます。表示されなければ再起動したらよさそう。&lt;/p>
&lt;pre>&lt;code>4: docker0: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu 1500 qdisc noqueue state DOWN group default
 link/ether be:bb:67:84:c8:22 brd ff:ff:ff:ff:ff:ff
 inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0
 valid_lft forever preferred_lft forever
 inet6 2001:db8:2::1/64 scope global nodad
 valid_lft forever preferred_lft forever
&lt;/code>&lt;/pre>
&lt;h3 id="使い方">使い方&lt;/h3>
&lt;p>IPv6が使えるようになったので&lt;code>compose.yaml&lt;/code>の&lt;code>networks&lt;/code>で明示的に宣言します。&lt;br>
下記のように設定してコンテナを落として作り直したらIPv6が使えるようになります。&lt;/p>
&lt;pre>&lt;code class="language-yaml">services:
 adgaurd:
 container_name: &amp;quot;adguard-home&amp;quot;
 image: adguard/adguardhome:v0.107.61
 networks:
 - adguard
networks:
 adguard:
 enable_ipv6: true
&lt;/code>&lt;/pre></description></item><item><title>Dockerfileのよく忘れる部分のメモ</title><link>https://whalem.net/post/2021-03/dockerfile-memo/</link><pubDate>Sun, 14 Mar 2021 13:13:16 +0900</pubDate><guid>https://whalem.net/post/2021-03/dockerfile-memo/</guid><description>&lt;h4 id="debian_frontend">DEBIAN_FRONTEND&lt;/h4>
&lt;p>&lt;code>apt install&lt;/code>時にインタラクティブな表示を無効にする。&lt;/p>
&lt;pre>&lt;code>RUN DEBIAN_FRONTEND=noninteractive \
 apt-get install -y
&lt;/code>&lt;/pre>
&lt;h4 id="multi-stage-build">Multi-Stage Build&lt;/h4>
&lt;p>&lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/">Multi-Stage&lt;/a>で&lt;code>COPY&lt;/code>する時の指定の仕方。&lt;/p>
&lt;pre>&lt;code>FROM golang:rc-alpine3.12 AS build

FROM alpine:3.12
COPY --from=build /tmp/main /tmp/
&lt;/code>&lt;/pre></description></item><item><title>Raspberry PiにDocker環境のインストール</title><link>https://whalem.net/post/2021-03/docker-on-raspberrypi/</link><pubDate>Sat, 13 Mar 2021 00:50:55 +0900</pubDate><guid>https://whalem.net/post/2021-03/docker-on-raspberrypi/</guid><description>&lt;h2 id="dockerのインストール">Dockerのインストール&lt;/h2>
&lt;p>&lt;a href="https://docs.docker.com/engine/install/debian/">公式ドキュメント&lt;/a>に従っても良いが、インストール用のスクリプトがあるのでそれを使う。&lt;/p>
&lt;pre>&lt;code class="language-shell">$ curl -fsSL https://get.docker.com -o install-docker.sh

$ sh ./install-docker.sh
&lt;/code>&lt;/pre>
&lt;p>簡単だね。&lt;/p>
&lt;h2 id="docker-composeのインストール">docker-composeのインストール&lt;/h2>
&lt;p>docker-composeの&lt;a href="https://github.com/docker/compose.git">リポジトリ&lt;/a>のリリースにはarm用のバイナリはないので、ソースからビルドを行う。&lt;/p>
&lt;pre>&lt;code class="language-shell">$ git clone https://github.com/docker/compose.git

$ cd compose

$ git checkout 1.27.4

$ ./script/build/linux
&lt;/code>&lt;/pre>
&lt;p>しばし待つ。&lt;code>dist&lt;/code>下にバイナリが吐かれていれば成功。あとは、&lt;code>/usr/local/bin&lt;/code>にコピって終了。&lt;/p>
&lt;pre>&lt;code class="language-shell">$ ls dist/
docker-compose-linux-aarch64

$ cp dist/dockeer-compose /usr/local/bin/docker-compose

$ chown root:root /usr/local/bin/docker-compose

$ chmod 755 /usr/local/bin/docker-compose

$ docker-compose version
docker-compose version 1.27.4, build 40524192
docker-py version: 4.3.1
CPython version: 3.7.7
OpenSSL version: OpenSSL 1.1.0l 10 Sep 2019
&lt;/code>&lt;/pre>
&lt;p>Version 1.28.x からビルド時の&lt;code>Dockerfile&lt;/code>と&lt;code>script/build/linux&lt;/code>の中身が変わり、今回の環境ではバイナリが吐かれなかった。ビルドは成功してるのにね。面倒なので1.27.4を使用する。&lt;/p></description></item><item><title>DroneのカスタムDNS設定</title><link>https://whalem.net/post/2021-03/drone-network-setting/</link><pubDate>Wed, 10 Mar 2021 12:58:54 +0900</pubDate><guid>https://whalem.net/post/2021-03/drone-network-setting/</guid><description>&lt;p>自宅の環境でGitea/Droneを構築していたが、CI時にGiteaからリポジトリをCloneできない。ドメインに接続できないと。自宅のLANからWAN側のIPにはアクセスできないので、内部DNSとして&lt;a href="https://unbound.jp/unbound/">Unbound&lt;/a>を構築した。&lt;/p>
&lt;pre>&lt;code class="language-shell">Initialized empty Git repository in /drone/src/.git/
+ git fetch origin +refs/heads/master:
fatal: unable to access 'http://gitea.whalem.net/whalem/drone_ci_test.git/': Failed to connect to gitea.whalem.net port 80: Operation timed out
&lt;/code>&lt;/pre>
&lt;p>DNSを構築したので、Drone Runnerへ設定したが、同じように&lt;code>Failed to connect to gitea.whalem.net port 80: Operation timed out&lt;/code>となる。Pingしてみると。&lt;/p>
&lt;pre>&lt;code class="language-shell">$ ping -c 4 gitea.whalem.net
PING gitea.whalem.net (&amp;lt;WAN_IP&amp;gt;): 56 data bytes
64 bytes from &amp;lt;WAN_IP&amp;gt;: seq=0 ttl=254 time=0.890 ms
&lt;/code>&lt;/pre>
&lt;p>あらら。Runnerに設定したけど、Pipelineの処理は別コンテナが作成され実行されるので、Runnerに設定しても意味ないと。Droneが作成するコンテナへDNSの設定方法を調べたけど、あまり良さそうな解決策は見つからなかったので、下の方法をとる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://discourse.drone.io/t/specify-a-host-or-a-custom-dns-in-drone-git-image/308">Specify a host or a custom dns in drone-git image&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>/etc/docker/daemon.json&lt;/code>に内部DNSのアドレスを追加する。&lt;code>daemon.json&lt;/code>は無ければ新しく作成する。&lt;/p></description></item></channel></rss>